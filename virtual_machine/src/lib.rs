//! This module contains the virtual machine implementation.
//! The virtual machine is responsible for executing the bytecode
//! generated by the compiler.
//!
//! The virtual machine is also register-based, meaning that it uses
//! registers to store intermediate values during the execution of the
//! program.
//!
//!
//!
//! 31            26 25       20 19                                0
//! ┌───────────────┬───────────┬───────────────────────────────────┐
//! │     OPCODE    │    REG    │              OTHER ARGS           │
//! └───────────────┴───────────┴───────────────────────────────────┘

pub mod error;
pub mod instruction;
pub mod machine;
pub mod memory;
pub mod program_builder;
pub mod register;

pub fn sign_extend(value: u32, from: u32) -> u32 {
    if (value >> (from - 1)) & 1 != 0 {
        value | (0xffff_ffff << from)
    } else {
        value
    }
}

#[cfg(test)]
mod test {
    use super::*;
    #[test]
    fn test_sign_extend() {
        assert_eq!(
            sign_extend(0b00000000000000000000000000011111, 5) as i32,
            -1
        );
    }
}
